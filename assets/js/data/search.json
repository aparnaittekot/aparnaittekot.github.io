[ { "title": "Functional Programming in Java - What and Why?", "url": "/posts/functional-programming-in-java-what-and-why/", "categories": "Technology", "tags": "coding, functional-programming, java, first-blog", "date": "2023-10-21 00:00:00 +0530", "snippet": "This blog aims to define what functional programming is and few very basic examples of the same. **Note: I will be posting another blog with in detail examples for functional programming in Java.**...", "content": "This blog aims to define what functional programming is and few very basic examples of the same. **Note: I will be posting another blog with in detail examples for functional programming in Java.** In Java, we write lots of code to perform certain operations with each line representing a sub operation. This style is called imperative programming. Since Java 8, this has been simplified a bit further by introducing functional programming which aims to build the code as functions and apply arguments to it. This makes the code less complex, cleaner, maintainable, and easier to test. Below are some examples of code snippets we may or may not have encountered in code which has the concept of functional programming. Iterating a listThe imperative wayUse case: Loop through a list and print its values. In the imperative world, a for statement would be used for the same like below and iterate each item.for(int i = 0; i &lt; listOfNames.size(); i++) { System.out.println(listOfNames.get(i)); }The functional wayReplace for loop statement with forEach() to use the functional way and this reduces the code to one line. listOfNames.forEach((name) -&gt; System.out.println(name));Transforming a listThe imperative wayUse case: Transforming through a list of names to contain all upper case names. In the imperative world, we would just use a for statement, iterate and add the upper case name to the newly created list. List&lt;String&gt; uppercaseNames = new ArrayList&lt;String&gt;();for(String name : listOfNames) { listOfNames.add(name.toUpperCase()); }The functional wayReplace with map() to perform this use case in the functional way. List&lt;String&gt; uppercaseNames = listOfNames.stream() .map(name -&gt; name.toUpperCase()) .collect(Collectors.toList());Finding elements in a collectionThe imperative wayUse case: Find list of names that contains all names that starts with A. In the imperative world, you would just use a for statement and check if each item starts with letter A. List&lt;String&gt; startsWithA = new ArrayList&lt;String&gt;(); for(String name : listOfNames) { if(name.startsWith(\"A\")) { startsWithA.add(name); }}The functional wayReplace using for loop statements with filter() to perform this use case in the functional way in the below fashion.List&lt;String&gt; startsWithA = listOfNames.stream() .filter(name -&gt; name.startsWith(\"A\")) .collect(Collectors.toList());Upcoming blog - Part 2I would be posting another blog with in detail examples for all the usages for functional programming in Java. Stay tuned! Detailed Code Examples on Functional Programming In Java - (Coming Soon!) Please enable JavaScript to view the comments powered by Disqus." }, { "title": "(Coming Soon!) Interesting facts about the Internet Bubble", "url": "/posts/interesting-facts-on-internet-bubble/", "categories": "Coming Soon", "tags": "coming-soon", "date": "0000-01-01 00:24:24 +0553", "snippet": "Coming Soon - Dec 2023", "content": "Coming Soon - Dec 2023" }, { "title": "(Coming Soon!) Building an ember.js application", "url": "/posts/building-an-emberjs-project/", "categories": "Coming Soon", "tags": "coming-soon", "date": "0000-01-01 00:24:24 +0553", "snippet": "Coming Soon - Nov 2023", "content": "Coming Soon - Nov 2023" }, { "title": "(Coming Soon!) Detailed Code Examples on Functional Programming In Java", "url": "/posts/functional-programming-in-java-examples/", "categories": "Coming Soon", "tags": "coming-soon", "date": "0000-01-01 00:24:24 +0553", "snippet": "Coming Soon - Oct 2023", "content": "Coming Soon - Oct 2023" } ]
